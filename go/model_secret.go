/*
 * Secret Server
 *
 * This is an API of a secret service. You can save your secret by using the API. You can restrict the access of a secret after the certen number of views or after a certen period of time.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"time"

	_ "github.com/lib/pq"
)

var db *sql.DB

type Secret struct {

	// Unique hash to identify the secrets
	Hash string `json:"hash,omitempty"`

	// The secret itself
	SecretText string `json:"secretText,omitempty"`

	// The date and time of the creation
	CreatedAt time.Time `json:"createdAt,omitempty"`

	// The secret cannot be reached after this time
	ExpiresAt time.Time `json:"expiresAt,omitempty"`

	// How many times the secret can be viewed
	RemainingViews int32 `json:"remainingViews,omitempty"`
}

type Secrets []Secret

func ConnectDB() {
	connStr := "user=letoan dbname=secret_server_api sslmode=disable"
	conn, err := sql.Open("postgres", connStr)
	handleErr(err)
	err = conn.Ping()
	if err != nil {
		log.Fatal("Error: Could not establish a connection with the database")
	} else {
		log.Printf("Connected to Secret Server API database ")
	}
	db = conn
}

func Create() {

}

func GetSecrets() Secrets {
	// queryStmt, err := db.Prepare

	rows, err := db.Query("SELECT * FROM secret;")
	handleErr(err)
	defer rows.Close()
	Secrets := Secrets{}
	for rows.Next() {
		Secret := Secret{}
		// var name string
		// if err := rows.Scan(&name); err != nil {
		// 	log.Fatal(err)
		// }
		// names = append(names, name)
		err = rows.Scan(
			&Secret.Hash,
			&Secret.SecretText,
			&Secret.CreatedAt,
			&Secret.ExpiresAt,
			&Secret.RemainingViews,
		)
		handleErr(err)

		// b, err := json.Marshal()
		// if err != nil {
		// 	fmt.Println(err)
		// 	return
		// }
		// fmt.Println(string(b))

		Secrets = append(Secrets, Secret)
	}
	return Secrets

}

func Show() {

}

func handleErr(err error) {
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}
}
